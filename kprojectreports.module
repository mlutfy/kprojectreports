<?php

/**
 * Implementation of hook_menu().
 */
function kprojectreports_menu() {
  $items['kprojectreports'] = array(
    'title' => 'Kproject Reports Settings',
    'page callback' => 'kprojectreports_admin_listreports',
    'access arguments' => array('manage projects'),
    'file' => 'kprojectreports_admin.inc.php',
  );

  $items['kprojectreports/%kprojectreport'] = array(
    'title' => 'Kproject Reports: Preview report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kprojectreports_preview_form', 1),
    'access arguments' => array('manage projects'),
    'file' => 'kprojectreports_admin.inc.php',
  );

  $items['kprojectreports/%kprojectreport/edit'] = array(
    'title' => 'Kproject Reports: Edit report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kprojectreports_admin_editreport', 1),
    'access arguments' => array('manage projects'),
    'file' => 'kprojectreports_admin.inc.php',
  );

  $items['kprojectreports/add'] = array(
    'title' => 'Kproject Reports: New report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kprojectreports_admin_editreport', 'add'),
    'access arguments' => array('manage projects'),
    'file' => 'kprojectreports_admin.inc.php',
  );

  $items['kprojectreports/%kprojectreport/delete'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('kprojectreports_delete_form', 1),
    'access arguments' => array('manage projects'),
    'file' => 'kprojectreports_admin.inc.php',
  );

  $items['kprojectreports/autocomplete'] = array(
    'page callback' => 'kprojectreports_autocomplete_contract',
    'page arguments' => array(2, 3),
    'access arguments' => array('manage projects'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_load() for %kprojectreport
 */
function kprojectreport_load($krid) {
  $report = db_query('SELECT * FROM {kprojectreports_schedules} WHERE krid = :krid', array(':krid' => $krid))->fetchObject();

  if (! empty($report->options)) {
    $report->options = unserialize($report->options);
  }

  return $report;
}

/**
 * Implements hook_cron().
 *
 * Sends the reports by e-mail, at pre-configured schedules.
 */
function kprojectreports_cron() {
  include_once(drupal_get_path('module', 'kprojectreports') .'/kprojectreports_frequency.inc.php');

  $timetorun = FALSE;
  $date_start = 0;
  $date_end = 0;

  $result = db_query("SELECT * FROM {kprojectreports_schedules}");

  foreach ($result as $report) {
    // Warning: no doubt the worst method ever. Too tired, I don't care.
    // The mktime() stuff works with edge case (new year, new month) because:
    // echo mktime(23,59,59, 1, 1 - 1, 2009); = 1230785999
    // date -d @1230785999 = Wed Dec 31 23:59:59 EST 2008
    $f = 'kprojectreports_frequency_timetorun_' . $report->frequency;

    if (function_exists($f)) {
      list($timetorun, $date_start, $date_end) = $f($report);
    }

    if ($timetorun && $date_start && $date_end && $report->mail) {
      // this is mainly to protect against cloning of sites during webdev
      $limithost = variable_get('kprojectreports_limithost', '');
      $servername = $_SERVER['HTTP_HOST'];
      $emailfrom  = variable_get('site_mail', 'FIXME@example.org');

      if ($limithost && $limithost != $servername) {
        watchdog('kprojectreports', 'Not mailing the report because the kprojectreports_limithost does not match the current host: ' . $limithost . ' vs ' . $servername);
        return;
      }

      $reportfunc = $report->report; // ex: kprojectreports_timespent
      include_once(drupal_get_path('module', 'kprojectreports') .'/' . $report->report . '.inc.php');
      $report->options = unserialize($report->options);
      $output =  $reportfunc($date_start, $date_end, $report);

      $mails = explode(',', $report->mail);

      foreach ($mails as $mail) {
        $headers = array(
          'Return-Path' => '<' . $emailfrom . '>',
          'Date' => date('r'),
          'From' => $emailfrom,
          'X-Mailer' => 'kprojectreports',
          'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
          'Mime-Version' => "1.0",
        );

        $subject = $report->title;

        if (function_exists('token_replace')) {
          $subject = token_replace($report->title); // D7: global/site now implicit?
        }

        // Add introduction, if any
        if ($report->intro) {
          $output = '<p>' . $report->intro . '</p>' . $output;
        }

        // Add a footer to inform about the origin
        $output .= '<p>' . t('This is an automated report sent from %server. For more information, contact: %emailfrom.', array('%server' => $servername, '%emailfrom' => $emailfrom)) . '</p>';
        $output .= '<ul><li>' . l(t('View online (requires authentication)'), 'kprojectreports/' . $report->krid . '/preview', array('query' => array('daterun' => date('Y-m-d')), 'absolute' => TRUE)) . '</li>';
        $output .= '<li>' . l(t('Edit report parameters (requires authentication)'), 'kprojectreports/' . $report->krid, array('absolute' => TRUE)) . '</li>';
        $output .= '</ul>';

        // Send e-mail
        $message = array(
          'id' => 'kprojectreports',
          'module' => 'kprojectreports',
          'to' => $mail,
          'subject' => $subject,
          'body' => array($output),
          'headers' => $headers,
        );

        $system = drupal_mail_system('kprojectreport', 'report');
        $message = $system->format($message);
      
        if ($system->mail($message)) {
          watchdog('kprojectreports', "Report sent to !dest: !subject", array('!dest' => $mail, '!subject' => $subject));
        }
        else {
          watchdog('kprojectreports', "Failed to send e-mail for report to !dest: !subject", array('!dest' => $mail, '!subject' => $subject), WATCHDOG_ERROR);
        }
      }

      db_query("UPDATE {kprojectreports_schedules} SET lastrun = UNIX_TIMESTAMP() WHERE krid = :krid", array(':krid' => $report->krid));
    }
  }
}

function kprojectreports_unixdatefromarray($a) {
  return mktime(0, 0, 0, $a['month'], $a['day'], $a['year']);
}

/**
 * Autocomplete for the Contract name.
 *
 * Based on kproject_autocomplete_parent from kproject.module.
 */
function kprojectreports_autocomplete_contract($parent, $string = '') {
  $matches = array();

  // For legacy reasons, we support either:
  // kproject/autocomplete/{kcontract,kclient,ktask}/search-term
  // kproject/autocomplete/{kcontract,kclient,ktask}?term=search-term
  if (! $string) {
    $string = $_GET['term'];
  }

  if ($parent == 'kcontract' && $string) {
    $result = db_query('SELECT id, subject FROM civicrm_case WHERE subject like :string', array(
      ':string' => $string . '%',
    ));

    foreach ($result as $record) {
      $s = $record->id .' ' . $record->subject;
      $matches[$s] = $s;
    }
  }

  drupal_json_output($matches);
}
